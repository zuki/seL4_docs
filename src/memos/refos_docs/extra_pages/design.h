/*! @file */

/*! @page design 設計の概要

@section Dataspace

RefOSの全体的な設計はdataspaceの抽象化とそれを管理するために必要な
インタフェースを中心に展開されています。

dataspaceはメモリ空間であり、バイトストリームで表現されます。dataspaceは
次のような実体を表現できます。

<ul>
    <li> ディスク上の物理ファイル（例: unixの/bin/sh） </li>
    <li> ハードウェアデバイス（例: unixの/dev/hda1） </li>
    <li> 匿名メモリのビット（例: 物理RAM） </li>
    <li> バイトストリーム（例: unixの/dev/urandom） </li>
</ul>

@image html dataspace_example.png "図1 - Dataspaceの設定例"

Dataspaceサーバ (dataservers) はdataspaceプロトコルインタフェースを実装し、
dataspace抽象化サービスをクライアントに提供します。たとえば、図1において、
dataspace Aの一部は、クライアントのメモリウィンドウ（クライアントの仮想メモリ）に
マッピングされています。この図のもう一つの側面はdataspace Aがdataspace Aの
コンテンツでdataspace Bを初期化することができることです。

@section インタフェース

RefOSの主要なインタフェースはプロセスサーバとデータサーバです。この2つの
インタフェースに加え、ネームサーバインタフェースなど、あまりメジャーでは
ない（が重要な）インタフェースも多数あり、追加機能を提供しています。

<h3>プロセスサーバインタフェース</h3>

プロセスサーバインターフェイスはプロセスの抽象化を行います。プロセスサーバ
インタフェースは次のようなメソッドを提供しています。

<ul>
    <li> プロセスとスレッドの開始、終了、管理 </li>
    <li> メモリウィンドウの作成、削除、管理 </li>
    <li> カーネルページフォールトの処理と委譲 </li>
</ul>

<h3>データサーバインタフェース</h3>

データサーバインタフェースの主な目的はdataspaceの抽象化を提供することです。
データサーバインタフェースは次のようなメソッドを提供しています。

<ul>
    <li> dataspaceの作成、削除、管理 </li>
    <li> dataspaceのメモリウィンドウへのマッピングとdataspaceの内容へのアクセス提供 </li>
    <li> 他のdataspaceの内容によるdataspaceの初期化 </li>
    <li> dataspaceにマッピングされるメモリウィドウ用のメモリフレームをマッピングするためのページャサービスの確立 </li>
</ul>

@section 起動
@image html startup.png "図2 - RefOSブートプロトコル"

RefOSブートプロトコルでは、プロセスサーバが起動し、自身を初期化します。
プロセスサーバが起動すると、プロセスサーバは内蔵のELFローダを使って
ファイルサーバを起動し、次いで、selfloaderを起動します。

@image html elfload.png "図3 - ELFローディング"

selfloaderはプロセスサーバが起動するプロセスであり、ユーザプロセスの起動に
使用されます。selfloaderは起動したプロセスと同じアドレス空間で実行します。
selfloaderはファイルサーバへの接続を確立し、ELF実行可能ヘッダーを読み、
ファイルサーバにより提供されたファイルコンテンツのバイトにマッピングされた
メモリウィンドウを作成します。selfloaderはスタックポインタのためのメモリ
ウィンドウも設定します。これらの作業を行った後、selfloaderは実行ファイルの
エントリポイントにジャンプします。すると、最初に読み込んだ命令でページフォルトが
発生します。

@section page_faults ページフォルト
@image html fault.png "図4 - ページフォルトの処理"

クライアントプログラムでページフォルトが発生すると、プロセスサーバはカーネルから
ページフォルト通知を受け取ります。selfloaderはクライアント用のメモリウィンドウを
初期化しているため、クライアントがフォールトしたウィンドウはプロセスサーバ自身の
dataspace（匿名メモリを表す）にマッピングされたデータです。

プロセスサーバはファイルサーバにページフォルトが発生したことを通知します。
通知を受けたファイルサーバはフォールトイベントを登録し、そのフォールトイベントを
処理し、プロセス間通信を通じて応答します。ファイルサーバはプロセスサーバが通知で
要求した（ウィンドウケーパビリティ、ウィンドウオフセット、メモリページ
アドレスなど）任意のデータを提供します。

プロセスサーバはメモリページの内容を自身のRAM dataspaceにコピーし、メモリページの
内容をつけてフォールトメッセージに応答します。これによりクライアントは実行を再開
させます。

@section ディスパッチャ

RefOSのサーバは受信したメッセージの処理にディスパッチャアルゴリズムを使用します。

@image html dispatcher.png "図5 - ディスパッチャの設計概要"

RefOSのディスパッチャアルゴリズムを説明するには例を挙げるのが一番です。
あるサーバーがメッセージを受信したとします。そのメッセージはディスパッチャ1に
より分析されます。ディスパッチャ1がそのメッセージを自分が処理するタイプの
メッセージであると判断した場合、ディスパッチャ1がそのメッセージを処理します。
そうでない場合、ディスパッチャ1はメッセージをディスパッチャ2に渡します。
ディスパッチャ1がディスパッチャ2にメッセージを渡すと、ディスパッチャ2もその
メッセージを分析し、そのメッセージが自分が処理するタイプのメッセージであるかを
判断します。ディスパッチャー1と同様に、ディスパッチャー2もメッセージを処理するか、
ディスパッチャ3にメッセージを渡します。このアルゴリズムは必要に応じて最後の
ディスパッチャまで繰り返されます。ディスパッチャはメッセージが自分の処理すべき
タイプのメッセージであると判断した場合、メッセージの内容に応じて適切なハンドラ
関数を呼び出してメッセージを処理します。もちろん、ディスパッチャがメッセージを
処理した場合はメッセージは処理済みになりますので、次のディスパッチャに渡される
ことはありません。最後のディスパッチャが自分が処理すべきタイプのメッセージでは
ないと判断した場合、サーバはエラーメッセージを生成します。

実装において各サーバが必ずしも4つのディスパッチャを持っているわけではないことに
注意してください。
*/
