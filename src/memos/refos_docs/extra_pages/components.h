
/*! @page components コンポーネント

RefOSはコンポーネントベースのマルチサーバオペレーティングシステム
デザインを採用しています。RefOSの2つの主要コンポーネントは
プロセスサーバとファイルサーバです。プロセスサーバは初期スレッドと
して実行され、残りのシステムの起動を担当します。その他のコンポーネント
にはクライアント、デバイスドライバ、ファイルサーバ、ターミナルプログラム、
テトリス、スネークがあります。

@image html component_design.png "図1 - RefOSのコンポーネント"

@section procserv プロセスサーバ
@image html procserv.png "図2 - プロセスサーバ"

プロセスサーバはシステムで最も信頼できるコンポーネントです。最初のカーネル
スレッドとして実行され、他のいかなるコンポーネントにも依存しません
（これによりデッドロックが回避されます）。プロセスサーバの実装はシングル
スレッドです。プロセスサーバは匿名メモリ用のDataspaceインタフェースも
実装しており、メモリマネージャとして機能します。

プロセスサーバは次のインタフェースを実装しています。

<ul>
    <li> プロセスサーバインタフェース（名前付け、メモリウィンドウ、プロセスなど） </li>
    <li> Dataspaceサーバインターフェイス（匿名メモリ用） </li>
    <li> ネームサーバインタフェース（ルートネームサーバとして機能） </li>
</ul>

<center>See code here: @ref apps/process_server/src/main.c </center>

@section fileserv ファイルサーバ
@image html fileserv.png "図3 - ファイルサーバ"

ファイルサーバはクライアントよりも信頼できますが、プロセスサーバよりは
信頼できません（これによりデッドロックは回避されます）。RefOSでは
ファイルサーバはディスクドライバを使用せず、実際のファイルコンテンツは
cpioアーカイブを使用してファイルサーバ実行ファイル自体にコンパイルされて
います。ファイルサーバはシステムの主たるデータサーバとして機能します。

ファイルサーバは次のインターフェイスを実装しています。

<ul>
    <li> Dataspaceサーバインタフェース（保存ファイルデータ用） </li>
    <li> サーバ接続インタフェース（クライアントの接続用） </li>
</ul>

<center>次のコードを参照: @ref apps/file_server/src/file_server.c </center>

@section conserv  コンソールサーバ
@image html conserv.png "図4 - コンソールサーバ"

コンソールサーバはシリアルとEGAの入出力機能を提供します。これはdataspace
インタフェースを通じて公開されます。コンソールサーバはEGA画面出力のための
ターミナルエミュレーションも提供しています。

コンソールサーバーは次のインターフェイスを実装しています。

<ul>
    <li> Dataspaceサーバインタフェース（シリアル入出力とEGA画面デバイス用） </li>
    <li> サーバ接続インタフェース（クライアントの接続用） </li>
</ul>

<center>次のコードを参照: @ref apps/console_server/src/console_server.c </center>

@section timeserv  タイマーサーバ
@image html timeserv.png "図5 - タイマーサーバ"

タイマーサーバはタイマーの時刻取得とスリープ機能を提供します。これは
dataspaceインタフェースを通じて公開されます。

タイマーサーバは次のインターフェイスを実装しています。

<ul>
    <li> Dataspaceサーバインタフェース（タイマーデバイス用） </li>
    <li> サーバ接続インタフェース（クライアントの接続用） </li>
</ul>

<center>次のコードを参照: @ref apps/timer_server/src/timer_server.c </center>

*/
